export async function copyText(text) {
    if ('clipboard' in navigator) {
        await navigator.clipboard.writeText(text);
    }
    else {
        //? This is the fallback deprecated way of copying text to the clipboard.
        //? Only runs if it can't find the clipboard API.
        const element = document.createElement('input');
        element.type = 'text';
        element.disabled = true;
        element.style.setProperty('position', 'fixed');
        element.style.setProperty('z-index', '-100');
        element.style.setProperty('pointer-events', 'none');
        element.style.setProperty('opacity', '0');
        element.value = text;
        document.body.appendChild(element);
        element.click();
        element.select();
        document.execCommand('copy');
        document.body.removeChild(element);
    }
}
function parseOptions(options) {
    return typeof options == 'string' ? { text: options } : options;
}
function addListeners(element, cb, events = ['click']) {
    for (const event of events) {
        element.addEventListener(event, cb, true);
    }
}
function removeListeners(element, cb, events = ['click']) {
    for (const event of events) {
        element.removeEventListener(event, cb, true);
    }
}
/**
 * A svelte action to copy text to clipboard.
 *
 * @see https://svelte-copy.willow.codes
 *
 * @example
 *
 * <script>
 *     import { copy } from 'svelte-copy';
 * </script>
 *
 * <button use:copy={'Hello World'}>
 *     Click me!
 * </button>
 */
export const copy = (element, initialOptions) => {
    let options = parseOptions(initialOptions);
    const handle = async (event) => {
        const text = options.text;
        try {
            await copyText(text);
            options.onCopy?.({ text, event });
        }
        catch (e) {
            const error = new Error(`${e instanceof Error ? e.message : e}`, {
                cause: e,
            });
            options.onError?.({ error, event });
        }
    };
    addListeners(element, handle, options.events);
    return {
        update(newOptions) {
            removeListeners(element, handle, options.events);
            options = parseOptions(newOptions);
            addListeners(element, handle, options.events);
        },
        destroy() {
            removeListeners(element, handle, options.events);
        },
    };
};
